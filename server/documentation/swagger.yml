swagger: '2.0'
info:
  description: 'Documentation for ISO Catalog Finder'
  version: '0.0.0 (BETA)'
  title: 'ISO Catalog Finder Documentation'
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: 'apiteam@swagger.io'
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'http://catalog-finder.herokuapp.com/'
basePath: '/api'
schemes:
  - 'http'
  - 'https'

paths:
  # AUTH
  /auth/login:
    post:
      tags:
        - 'Auth'
      summary: 'Log in to access admin privileges (add/delete song or books)'
      produces:
        - 'application/json'
      parameters:
        - name: 'username'
          in: 'body'
          description: User's username
          required: true
          type: string
        - name: 'password'
          in: 'body'
          description: User's password
          required: true
          type: string
      responses:
        '200':
          description: 'Successful Login'
          schema:
            $ref: '#/definitions/LoginResponse'
        '401':
          description: 'Wrong Credentials'
          schema:
            $ref: '#/definitions/CredentialErrorResponse'
  /auth/logout:
    post:
      tags:
        - 'Auth'
      summary: 'Log out from the app'
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'Successful Logout'
          schema:
            $ref: '#/definitions/LogoutResponse'
        '400':
          description: 'Unsuccessful logout, maybe because user have not logged in'
          schema:
            $ref: '#/definitions/CredentialErrorResponse'
  /auth/register:
    post:
      tags:
        - 'Auth'
      summary: 'Register a user to the application'
      produces:
        - 'application/json'
      parameters:
        - name: 'username'
          in: 'body'
          description: User's username
          required: true
          type: string
        - name: 'password'
          in: 'body'
          description: User's password
          required: true
          type: string
        - name: 'email'
          in: 'body'
          description: User's email
          required: true
          type: string
      responses:
        '200':
          description: 'Successful Register'
          schema:
            $ref: '#/definitions/RegisterResponse'
        '401':
          description: 'Unsuccessful register'
          schema:
            $ref: '#/definitions/CredentialErrorResponse'

  # SONG
  /song:
    get:
      tags:
        - Song
      summary: Get paginated songs
      produces:
        - application/json
      parameters:
        - name: page
          in: query
          description: Get songs on page X, items per page is 10
          required: true
          type: string
      responses:
        '200':
          description: 'Successful GET Request'
          schema:
            $ref: '#/definitions/GetSongResponse'
        '401':
          description: 'Unsuccessful register'
          schema:
            $ref: '#/definitions/CredentialErrorResponse'

definitions:
  Song:
    type: object
    properties:
      nama:
        type: string
        description: Nama lagu
      jenisAransemen:
        type: string
        enum:
          [
            Aransemen ISO,
            Aransemen Non-ISO,
            Komposisi ISO,
            Komposisi Non-ISO,
            Job,
          ]
        description: Jenis aransemen ISO
      klasik:
        type: boolean
        description: Penanda musik ini klasik atau tidak
      instrumen:
        type: string
        description: Kode aransemen dari musik itu sendiri, contohnya Gp (gitar - perkusi) , GP (gitar - piano), S (string)

  GetSongResponse:
    type: object
    properties:
      docs:
        description: Song array
        type: array
        items:
          $ref: '#/definitions/Song'
      total:
        type: integer
        description: Total number of result items
      limit:
        type: integer
        description: Total number of items per page

  RegisterResponse:
    type: 'object'
    properties:
      status:
        description: 'Status Response'
        type: integer
      message:
        type: string
        description: 'Successful Register Response'
      info:
        type: object
        properties:
          username:
            type: string
            description: 'Registered user username'
          email:
            type: string
            description: 'Registered user email'
  LogoutResponse:
    type: 'object'
    properties:
      status:
        description: 'Status Response'
        type: integer
      message:
        type: string
        description: 'Successful Logout Response'
  LoginResponse:
    type: 'object'
    properties:
      status:
        description: 'Status Response'
        type: integer
      auth:
        type: 'boolean'
        description: 'Is login successful or not'
      username:
        type: string
        description: 'Logged in username'
  # The schema of Event
  CredentialErrorResponse:
    type: 'object'
    properties:
      status:
        description: 'Error status response'
        type: integer
      message:
        type: string
        description: 'Error message'
